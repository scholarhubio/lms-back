services:
#_____________admin______________
  admin:
    build:
      context: admin
      dockerfile: dockerfile
    container_name: django_admin
    command: poetry run python3 manage.py runserver 0.0.0.0:8000 #gunicorn config.asgi:application --config config/gunicorn_config.py
    environment:
      PYTHONPATH: /opt/app
    env_file:
      - .env
    volumes:
      - ./admin:/opt/app:rw
      - static_volume:/opt/app/static:rw
      - media_volume:/opt/app/media:rw
    depends_on:
      content_db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app-network

  content_api:
    build:
      context: content
      dockerfile: dockerfile
    container_name: content_api
    command: poetry run uvicorn app:app --port 8080 --reload --host 0.0.0.0 --workers 4
    environment:
      PYTHONPATH: /opt/app
    ports:
      - 8001:8080
    env_file:
      - .env
    volumes:
      - ./content:/opt/app:rw
    depends_on:
      content_db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - app-network

  content_db:
    image: postgres:16.4-alpine3.20
    container_name: content_db
    env_file:
      .env
    environment:
      - POSTGRES_PASSWORD=${CONTENT_POSTGRES_PASSWORD}
      - POSTGRES_USER=${CONTENT_POSTGRES_USER}
      - POSTGRES_DB=${CONTENT_POSTGRES_DB_NAME}
      - POSTGRES_PORT=${CONTENT_POSTGRES_PORT}
    volumes:
      - pg_data:/var/lib/postgresql/data:rw
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${CONTENT_POSTGRES_USER} -d ${CONTENT_POSTGRES_DB_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network

  redis:
    image: redis:7.2.3-alpine3.18
    container_name: redis
    restart: on-failure
    env_file:
      - .env
    volumes:
      - redis_data:/data:rw
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - app-network

  nginx:
    image: nginx:1.27.1-alpine-slim
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/django_admin_lb.conf:/etc/nginx/conf.d/django_admin_lb.conf:ro
      - ./nginx/content_api_lb.conf:/etc/nginx/conf.d/content_api_lb.conf:ro
      - static_volume:/opt/app/static:ro
      - media_volume:/opt/app/media:ro
    depends_on:
      admin:
        condition: service_started
      content_api:
        condition: service_started
    ports:
      - "8000:8000"
      - "8080:8080"
    networks:
      - app-network

  content_api_lb:
    image: nginx:1.27.1-alpine-slim
    container_name: content_api_lb
    volumes:
      - ./load_balancers/nginx.conf:/etc/nginx/nginx.conf
      - ./load_balancers/content_api.conf:/etc/nginx/conf.d/content_api.conf:ro
    depends_on:
      - content_api
    networks:
      - app-network

  admin_lb:
    image: nginx:1.27.1-alpine-slim
    container_name: admin_lb
    volumes:
      - ./load_balancers/nginx.conf:/etc/nginx/nginx.conf
      - ./load_balancers/django_admin.conf:/etc/nginx/conf.d/django_admin.conf:ro
    depends_on:
      - admin
    networks:
      - app-network

volumes:
  static_volume:
  media_volume:
  pg_data:
  redis_data:

networks:
  app-network:
    driver: bridge